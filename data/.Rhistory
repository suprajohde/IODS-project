dim(alc)
colnames(alc)
str(alc)
plot_absenses <- lm(high_use ~ absenses, data = alc)
plot_absenses <- lm(high_use ~ absenses, data = alc)
plot_absenses <- lm(high_use ~ absences, data = alc)
plot_absenses <- lm(high_use ~ absences, data = alc)
plot_absenses <- lm(high_use ~ absences, data = alc)
plot_absenses <- lm(high_use ~ absences, data = alc)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
knitr::opts_chunk$set(echo = TRUE)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
dim(alc)
colnames(alc)
str(alc)
library(tidyr); library(dplyr); library(ggplot2)
install.packages("tidyr")
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
plot_absenses <- lm(high_use ~ absences, data = alc)
alc %>% group_by(absences, high_use) %>% summarise(count = n() )
alc %>% group_by(absences, high_use) %>% summarise(count = n() ) + geom_bar()
plot_abs <- alc %>% group_by(absences, high_use) %>% summarise(count = n() )
plot_abs + geom_bar()
plot_abs + geom_bar()
alc %>% group_by(absences, high_use) %>% summarise(count = n() )
plot_abs + geom_bar()
alc %>% group_by(absences, high_use) %>% summarise(count = n() )
alc %>% group_by(absences, high_use) %>% summarise(count = n(), high_use )
alc %>% group_by(absences, high_use) %>% summarise(count = n() )
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("absences")
g1 + geom_bar() + ylab("absences")
alc %>% group_by(absences, high_use) %>% summarise(count = n() )
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences))
# define the plot as a boxplot and draw it
g1 + geom_bar() + ylab("absences")
alc %>% group_by(absences, high_use) %>% summarise(count = n() )
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("absences")
alc %>% group_by(health, high_use) %>% summarise(count = n() )
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health))
g1 + geom_boxplot() + ylab("health")
alc %>% group_by(health, high_use) %>% summarise(count = n() )
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("health")
pairs(alc[-1], col=alc$sex)
alc %>% group_by(health, high_use) %>% summarise(count = n() )
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("health")
pairs(alc[-1], col=alc$sex)
pairs(alc[-1], col=alc$high_use)
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value, col=high_use)) + facet_wrap("key", scales = "free") + geom_bar()
library(tidyr); library(dplyr); library(ggplot2)
gather(alc$high_use) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value), mapping = aes(col=high_use, alpha=0.3) ) + facet_wrap("key", scales = "free") + geom_bar()
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
dim(alc)
colnames(alc)
str(alc)
summary(alc)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
dim(alc)
colnames(alc)
str(alc)
summary(alc, high_use = TRUE)
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# define the plot as a boxplot and draw it
g1 + geom_bar() + ylab("sex")
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
alc %>% group_by(sex, high_use) %>% summarise(count = n())
g1 <- ggplot(alc, aes(x = high_use, y = n(), col = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
alc %>% group_by(sex, high_use) %>% summarise(count = n())
g1 <- ggplot(alc, aes(x = absences, y = high_use, col = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
alc %>% group_by(sex, high_use) %>% summarise(count = n())
g1 <- ggplot(alc, aes(x = high_use , y = absences, col = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("sex")
alc <- mutate(alc, absences_high = abcsences > 3)
alc <- mutate(alc, absences_high = absences > 3)
alc %>% group_by(absences_high, high_use) %>% summarise(count = n() )
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("absences_high")
alc <- mutate(alc, absences_high = absences > 3)
alc %>% group_by(absences_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("absences_high")
alc <- mutate(alc, health_bad = health < 3)
alc %>% group_by(health_bad, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health_bad))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("health_bad")
alc %>% group_by(failures, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = failures))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("failures")
alc <- mutate(alc, failures_high = failures > 1)
alc %>% group_by(failures_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = failures_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("failures_high")
alc %>% group_by(activities, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = activities))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("activities")
alc <- mutate(alc, health_poor = health < 3)
alc %>% group_by(health_poor, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health_poor))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("health_poor")
m <- glm(high_use ~ failures_high + absences_high + activities + health_poor, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
m <- glm(high_use ~ failures_high + absences_high + activities + health_poor, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
mean(loss_func(alc$high_use, alc$prediction))
# K-fold cross-validation
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
?cv.glm
# average number of wrong predictions in the cross validation
cv$delta[1]
knitr::opts_chunk$set(echo = TRUE)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
dim(alc)
colnames(alc)
str(alc)
summary(alc)
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
alc <- mutate(alc, absences_high = absences > 3)
alc %>% group_by(absences_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("absences_high")
alc <- mutate(alc, health_poor = health < 3)
alc %>% group_by(health_poor, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health_poor))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("health_poor")
alc <- mutate(alc, failures_high = failures > 1)
alc %>% group_by(failures_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = failures_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("failures_high")
alc %>% group_by(activities, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = activities))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("activities")
m <- glm(high_use ~ failures_high + absences_high + activities + health_poor, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
mean(loss_func(alc$high_use, alc$prediction))
# K-fold cross-validation
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
?cv.glm
# average number of wrong predictions in the cross validation
cv$delta[1]
knitr::opts_chunk$set(echo = TRUE)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
dim(alc)
colnames(alc)
str(alc)
summary(alc)
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
alc <- mutate(alc, absences_high = absences > 3)
alc %>% group_by(absences_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("absences_high")
alc <- mutate(alc, health_poor = health < 3)
alc %>% group_by(health_poor, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health_poor))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("health_poor")
alc <- mutate(alc, failures_high = failures > 1)
alc %>% group_by(failures_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = failures_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("failures_high")
alc %>% group_by(activities, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = activities))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("activities")
m <- glm(high_use ~ failures_high + absences_high + activities + health_poor, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
mean(loss_func(alc$high_use, alc$prediction))
# K-fold cross-validation
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
?cv.glm
# average number of wrong predictions in the cross validation
cv$delta[1]
knitr::opts_chunk$set(echo = TRUE)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
dim(alc)
colnames(alc)
str(alc)
summary(alc)
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
alc <- mutate(alc, absences_high = absences > 3)
alc %>% group_by(absences_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("absences_high")
alc <- mutate(alc, health_poor = health < 3)
alc %>% group_by(health_poor, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health_poor))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("health_poor")
alc <- mutate(alc, failures_high = failures > 1)
alc %>% group_by(failures_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = failures_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("failures_high")
alc %>% group_by(activities, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = activities))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("activities")
m <- glm(high_use ~ failures_high + absences_high + activities + health_poor, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
mean(loss_func(alc$high_use, alc$prediction))
# K-fold cross-validation
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
?cv.glm
# average number of wrong predictions in the cross validation
cv$delta[1]
knitr::opts_chunk$set(echo = TRUE)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
dim(alc)
colnames(alc)
str(alc)
summary(alc)
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
alc <- mutate(alc, absences_high = absences > 3)
alc %>% group_by(absences_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("absences_high")
alc <- mutate(alc, health_poor = health < 3)
alc %>% group_by(health_poor, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health_poor))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("health_poor")
alc <- mutate(alc, failures_high = failures > 1)
alc %>% group_by(failures_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = failures_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("failures_high")
alc %>% group_by(activities, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = activities))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("activities")
m <- glm(high_use ~ failures_high + absences_high + activities + health_poor, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
mean(loss_func(alc$high_use, alc$prediction))
# K-fold cross-validation
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
?cv.glm
# average number of wrong predictions in the cross validation
cv$delta[1]
knitr::opts_chunk$set(echo = TRUE)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
dim(alc)
colnames(alc)
str(alc)
summary(alc)
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
alc <- mutate(alc, absences_high = absences > 3)
alc %>% group_by(absences_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("absences_high")
alc <- mutate(alc, health_poor = health < 3)
alc %>% group_by(health_poor, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health_poor))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("health_poor")
alc <- mutate(alc, failures_high = failures > 1)
alc %>% group_by(failures_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = failures_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("failures_high")
alc %>% group_by(activities, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = activities))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("activities")
m <- glm(high_use ~ failures_high + absences_high + activities + health_poor, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
mean(loss_func(alc$high_use, alc$prediction))
# K-fold cross-validation
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
?cv.glm
# average number of wrong predictions in the cross validation
cv$delta[1]
knitr::opts_chunk$set(echo = TRUE)
alc <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep=",", header=TRUE)
dim(alc)
colnames(alc)
str(alc)
summary(alc)
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
alc <- mutate(alc, absences_high = absences > 3)
alc %>% group_by(absences_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = absences_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("absences_high")
alc <- mutate(alc, health_poor = health < 3)
alc %>% group_by(health_poor, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = health_poor))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("health_poor")
alc <- mutate(alc, failures_high = failures > 1)
alc %>% group_by(failures_high, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = failures_high))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("failures_high")
alc %>% group_by(activities, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = activities))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("activities")
m <- glm(high_use ~ failures_high + absences_high + activities + health_poor, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
mean(loss_func(alc$high_use, alc$prediction))
# K-fold cross-validation
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
?cv.glm
# average number of wrong predictions in the cross validation
cv$delta[1]
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# compute the average number of wrong predictions in the (training) data
mean(loss_func(alc$high_use, alc$prediction))
# K-fold cross-validation
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
# average number of wrong predictions in the cross validation
cv$delta[1]
pairs(alc)
